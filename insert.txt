
    def insert(self, value):
        '''
        FIXME:
        Implement this function.

        The lecture videos provide a high-level overview of how to insert into an AVL tree,
        and the textbook provides full python code.
        The textbook's class hierarchy for their AVL tree code is fairly different from our class hierarchy,
        however, so you will have to adapt their code.

        HINT:
        It is okay to add @staticmethod helper functions for this code.
        The code should look very similar to the code for your insert function for the BST,
        but it will also call the left and right rebalancing functions.
        '''
   
        if self.root is None:
            self.root = Node(value)
        else:
            AVLTree._insert(self.root, value)
   

    @staticmethod
    def _insert(node, v):
        if v < node.value:
            if  node.left is None: 
                node.left = Node(v)
            else:
                AVLTree._insert(node.left, v)
        elif v > node.value:
            if node.right is None:
                node.right = Node(v)
            else:
                AVLTree._insert(node.right, v) 

        if not AVLTree._is_avl_satisfied(node):
            return AVLTree.rebalance(node, v)

    @staticmethod
    def rebalance(node, v):
        b = AVLTree._balance_factor(node)

        if b > 1 and v < node.left.value:
            return AVLTree._right_rotate(node)

        elif b < -1 and v > node.right.value:
            return AVLTree._left_rotate(node)
        
        elif b > 1 and v > node.left.value:
            node.left = AVLTree._left_rotate(node.left)
        else:
            return node
